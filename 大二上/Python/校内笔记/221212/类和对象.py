# 面向对象的機念
"""
    面向过程，一般先会分析解决问题的步骤，使用函数实现每个步骤的功能，然后依次按步骤调用函数。
    面向对象，分析问题，提炼多个对象，将不同对象各自的特征和行为进行封装，之后通过控制对象的行为来解决问题。
    类和对象
    类，是抽象的，是一群具有相同特征（静）和行为（动）事物的统称。
    对象，是我们能看见的，比如我们每一个具体的人
    类就是对象的模板，对象是用于描述现实中的个体。
    一、类的定义
    人类，特征，身高，体重，性别等。行为,吃饭，睡觉，工作等。
    1) 类名,首字母大写
    2) 类的属性，特征，身高，体重，性别等]
    3) 类的方法，行为,吃饭，睡觉，工作等。

    类属性:是类中所拥有的属性, 被类所有的实例(对象)共享, 需要在类中显性定义, 即定义在方法外
    实例属性:是在方法内部声明的属性, 每个实例独享 通过对象名访问
"""


class Person:
    """
    属性(类属性,实例属性)
    方法(类方法,实例方法)
    """


class Cat:  # 定义了一个猫科动物类
    leg = 4  # 4条腿 类属性

    def eat(self):  # 吃东西 实例方法 并不是函数,方法和函数两者不同,方法是在类中定义的
        # self代表当前对象 是指向实例本身的引用
        print("猫吃鱼")


# 创建一个类的对象(实例)
"""
    格式:实例名(对象名) = 类名()
"""
white_cat = Cat()  # 创建一个白猫对象,实际是一个变量,是一个合法的标识符
white_cat.eat()  # 可以通过实例名,去访问类中的方法
print(white_cat.leg)  # 也可以通过实例名,去访问类中的属性

# 特殊方法 - 构造方法
"""
    格式: def __init__(self):
    特点:当我们创建好类的对象时,系统自动调用构造方法
"""


class Car:
    wheel = 4  # 类属性 被所有类的实例共享

    def __init__(self):  # 构造方法 实例方法
        self.color = '黑色'  # 颜色属性 实例属性 是在实例方法内声明的,每个实例独享

    def run(self):
        print(f"{self.color}车在跑")


bmw = Car()  # 创建一个bmw对象,自动添加了一个color属性
bmw.run()

benz = Car()  # 创建一个benz对象,自动添加了一个color属性
benz.run()


# ------- 带参数的构造方法 -------
class Car:
    wheel = 4  # 类属性 被所有类的实例共享

    def __init__(self,name, color):  # 构造方法 实例方法 color为参数
        self.name = name  # Name属性
        self.Color = color  # Color属性 颜色属性 实例属性 是在实例方法内声明的,每个实例独享

    def run(self):
        print(f"{self.Color}的{self.name}车在跑")


benzW = Car('奔驰', '白色')  # 创建一个benz对象,自动添加了一个color属性
benzW.run()

benzB = Car('奔驰', '黑色')  # 创建一个benz对象,自动添加了一个color属性
benzB.run()
