<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    namespace 为名称空间
-->
<mapper namespace="com.mybatis.mapper.BrandMapper">
    <!--    <select id="selectAll" resultType="com.mybatis.pojo.User">-->

    <!--
        数据库表的字段名 和 实体类的属性名称 不一样,则不能自动封装数据
            * 起别名:对不一样的列名起别名, 让别名与实体类的属性名一致
                * 缺点:每次查询都要定义别名
                    * 使用sql片段解决问题
                        * 缺点:不灵活
            * resultMap:
                1.定义<resultMap>标签
                2.在<select>标签中,使用resultMap属性替换 resulType属性
    -->
    <sql id="brand_column">
        id, brand_name as brandName, company_name as companyName, ordered, description, status
    </sql>

    <!--
        id:唯一标识
        type:映射类型 支持别名
    -->
    <resultMap id="brandResultMap" type="brand">
        <!--
        id:完成主键字段的映射
            column:表的列名
            property:实体类的属性名
        result:完成一般字段的映射
            column:表的列名
            property:实体类的属性名
    -->
        <result column="brand_name" property="brandName"></result>
        <result column="company_name" property="companyName"></result>
    </resultMap>

    <!--    <select id="selectAll" resultType="brand">-->
    <!--        select <include refid="brand_column"></include>-->
    <!--        from tb_brand;-->
    <!--    </select>-->

    <select id="selectAll" resultMap="brandResultMap">
        select *
        from tb_brand;
    </select>


    <!--
        * 参数占位符
            1 #{}:会将其替换为 ? -> 为了防止sql注入问题
            2 ${}:拼sql -> 会存在sql注入问题
            3 使用时机:
                * 参数传递时使用#{}
                * 表名或列名不固定的情况下,可以使用${}替换表/列名
        * 参数类型: parameterType可以省略不写 一般也不会去写
        * 特殊字符处理:eg(<)
            1 转义
            2 CDATA区(输入"CD"自动生成)
    -->
    <select id="selectByIdBrand" parameterType="integer" resultMap="brandResultMap">
        select *
        from tb_brand
        where id = #{id};
    </select>


    <!-- 条件查询 -->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        where status = #{status}
          and company_name like #{companyName}
          and brand_name like #{brandName};
    </select>

    <!--
        动态条件查询
            * if标签
                * test:判断条件
                * 如果test的值为true,则执行if标签中的内容
                * 如果test的值为false,则不执行if标签中的内容
                * 问题:如果第一个if不执行 则where后面直接会连接and
                    * 解决1:添加恒等式1 = 1
                    * 解决2:添加where标签
            * where标签
                * 作用:用于拼接where条件
                * 如果where标签中的内容为空,则不拼接where
                * 如果where标签中的内容不为空,则拼接where
        -->
    <select id="selectDynamicByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        # where 1 = 1
        <where>
            <if test="status != null">
                and status = #{status}
            </if>
            <if test="companyName != null and companyName != ''">
                and company_name like #{companyName}
            </if>
            <if test="brandName != null and brandName != ''">
                and brand_name like #{brandName}
            </if>
        </where>
    </select>

    <!--单条件-动态查询-->
    <select id="selectDynamicByConditionSingle" resultMap="brandResultMap">
        select *
        from tb_brand
        where
        <choose> <!--相当于switch-->
            <when test="status != null"> /*相当于case*/
                status = #{status}
            </when>
            <when test="companyName != null and companyName != ''"> /*相当于case*/
                company_name like #{companyName}
            </when>
            <when test="brandName != null and brandName != ''"> /*相当于case*/
                brand_name like #{brandName}
            </when>
            <otherwise> /*若上方都不符合条件,则执行该条,相当于default*/
                1 = 1
            </otherwise>
        </choose>
    </select>

</mapper>